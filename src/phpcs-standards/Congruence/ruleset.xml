<?xml version="1.0"?>
<ruleset name="LEVIY">
    <description>LEVIY Coding Standard</description>

    <arg name="report-width" value="auto"/>

    <rule ref="PSR1"/>
    <rule ref="PSR2">
        <exclude name="PSR2.Methods.FunctionCallSignature.ContentAfterOpenBracket"/>
    </rule>

    <!-- Enforce some of the rules of PSR-12 -->

    <!-- Import statements MUST never begin with a leading backslash as they
    must always be fully qualified. -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>

    <!-- Visibility MUST be declared on all constants if your project PHP
    minimum version supports constant visibilities (PHP 7.1 or later). -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility"/>

    <!-- When you have a return type declaration present there MUST be one space
    after the colon followed by the type declaration. The colon and declaration
    MUST be on the same line as the argument list closing parentheses with no
    spaces between the two characters. -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing"/>

    <!-- In nullable type declarations there MUST NOT be a space between the
    question mark and the type. -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>

    <!-- Declare statements MUST contain no spaces and MUST be exactly
    declare(strict_types=1) (with an optional semi-colon terminator). -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="linesCountBeforeDeclare" value="0"/>
            <property name="linesCountAfterDeclare" value="1"/>
            <property name="spacesCountAroundEqualsSign" value="0"/>
        </properties>
    </rule>

    <!-- Add our own rules -->

    <!-- Enforce importing of all classes, functions and constants from other namespaces
    (including the global namespace) -->
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly" >
        <properties>
            <property name="searchAnnotations" value="true"/>
            <property name="allowFallbackGlobalFunctions" value="false"/>
            <property name="allowFallbackGlobalConstants" value="false"/>
        </properties>
    </rule>

    <!-- Sort use statements and report unused ones -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses">
        <properties>
            <property name="psr12Compatible" value="true"/>
        </properties>
    </rule>

    <!-- Use PHP native type hints whenever possible. Use docblocks only when
    the use of native type hints is impossible. -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint"/>
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint"/>

    <!-- Ensure that arguments with a default type of null are marked nullable -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>

    <!-- Enforce the use of bool instead of boolean and int instead of int in
    docblocks -->
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>

    <!-- Enforce trailing commas in multi-line arrays -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>

    <!-- Enforce strict comparisons (=== instead of ==) -->
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>

    <!-- Disallow Yoda conditions -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>

    <!-- Disallow the use of certain annotations -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array" value="@author,
                    @created,
                    @version,
                    @package,
                    @copyright,
                    @license,
                    @constructor,
                    @type"/>
        </properties>
    </rule>

    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Generic.CodeAnalysis.EmptyStatement"/>
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.Functions.CallTimePassByReference"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Generic.PHP.Syntax"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>

    <rule ref="Generic.CodeAnalysis.EmptyStatement.DetectedCATCH">
        <type>warning</type>
    </rule>

    <rule ref="PEAR.Commenting.InlineComment"/>

    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.PHP.DiscouragedFunctions"/>
    <rule ref="Squiz.PHP.Eval"/>
    <rule ref="Squiz.PHP.NonExecutableCode">
        <type>error</type>
    </rule>
    <rule ref="Squiz.PHP.CommentedOutCode">
        <type>error</type>
    </rule>
    <rule ref="Squiz.Scope.MemberVarScope"/>
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>

    <rule ref="Symfony.Classes.MultipleClassesOneFile"/>
    <rule ref="Symfony.Classes.PropertyDeclaration"/>
    <rule ref="Symfony.Commenting.ClassComment">
        <exclude name="Symfony.Commenting.ClassComment.Missing"/>
        <exclude name="Symfony.Commenting.ClassComment.SpacingBeforeTags"/>
    </rule>
    <rule ref="Symfony.Commenting.FunctionComment">
        <exclude name="Symfony.Commenting.FunctionComment.MissingParamComment"/>
        <exclude name="Symfony.Commenting.FunctionComment.ParamNameNoMatch"/>
        <exclude name="Symfony.Commenting.FunctionComment.SpacingAfterParamName"/>
    </rule>
    <rule ref="Symfony.Formatting.BlankLineBeforeReturn"/>
    <rule ref="Symfony.Functions.ScopeOrder"/>
    <rule ref="Symfony.NamingConventions.ValidClassName">
        <exclude name="Symfony.NamingConventions.ValidClassName.InvalidAbstractName"/>
        <exclude name="Symfony.NamingConventions.ValidClassName.InvalidInterfaceName"/>
        <exclude name="Symfony.NamingConventions.ValidClassName.InvalidTraitName"/>
        <exclude name="Symfony.NamingConventions.ValidClassName.InvalidExceptionName"/>
    </rule>
    <rule ref="Symfony.Objects.ObjectInstantiation"/>
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Symfony.Whitespace.AssignmentSpacing"/>
    <rule ref="Symfony.Whitespace.BinaryOperatorSpacing"/>
    <rule ref="Symfony.Whitespace.CommaSpacing"/>

    <rule ref="Symfony.Commenting.FunctionComment.Missing">
        <severity>0</severity>
    </rule>
    <rule ref="Symfony.Commenting.FunctionComment.MissingParamTag">
        <severity>0</severity>
    </rule>
    <rule ref="Symfony.Commenting.FunctionComment.MissingReturn">
        <severity>0</severity>
    </rule>
</ruleset>
